{"data":{"markdownRemark":{"id":"89fcd788-e9ad-5b1e-880c-f98da4f3020c","frontmatter":{"title":"GraphQL 学习笔记","date":"2019/03/30","tags":["GraphQL"],"issueId":50},"fields":{"slug":"/2019-03-30T04:10:16Z/GraphQL学习笔记/"},"excerpt":"入门 定义 Query 类型的 schema 进行查询 为每个 API 节点提供 resolver 函数 处理 GraphQL 查询 创建 GraphQL 服务器 将处理 GraphQL 查询的脚本替换会 express API 服务器 客户端发起  GraphQL 请求 在请…","html":"<h2 id=\"入门\"><a href=\"#%E5%85%A5%E9%97%A8\" aria-label=\"入门 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>入门</h2>\n<ul>\n<li>定义 Query 类型的 schema 进行查询</li>\n<li>为每个 API 节点提供 resolver 函数</li>\n<li>处理 GraphQL 查询</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用 GraphQL schema language 构建一个 schema</span>\n<span class=\"token keyword\">var</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">buildSchema</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n  type Query {\n    hello: String\n  }\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 根节点为每个 API 入口端点提供一个 resolver 函数</span>\n<span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">hello</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 运行 GraphQL query '{ hello }' ，输出响应</span>\n<span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> <span class=\"token string\">'{ hello }'</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"创建-GraphQL-服务器\"><a href=\"#%E5%88%9B%E5%BB%BA-GraphQL-%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-label=\"创建 GraphQL 服务器 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建 GraphQL 服务器</h2>\n<p>将处理 GraphQL 查询的脚本替换会 express API 服务器</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> graphqlHTTP <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create GraphQL scheme &amp; resovler</span>\n\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">:</span> schema<span class=\"token punctuation\">,</span>\n  rootValue<span class=\"token punctuation\">:</span> root<span class=\"token punctuation\">,</span>\n  graphiql<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Running a GraphQL API server at localhost:4000/graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"客户端发起--GraphQL-请求\"><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7--GraphQL-%E8%AF%B7%E6%B1%82\" aria-label=\"客户端发起  GraphQL 请求 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>客户端发起  GraphQL 请求</h2>\n<p>在请求的  query 中发送 GraphQL 请求</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data returned:'</span><span class=\"token punctuation\">,</span> xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">:</span> <span class=\"token string\">\"{ hello }\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"Schema-类型\"><a href=\"#Schema-%E7%B1%BB%E5%9E%8B\" aria-label=\"Schema 类型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schema 类型</h2>\n<p>默认支持的标量类型有 String、Int、Float、Boolean 和 ID。</p>\n<p>默认情况下，每个类型都是可以为空的 —— 意味着所有的标量类型都可以返回 null。使用感叹号可以标记一个类型不可为空，如 String! 表示非空字符串。</p>\n<p>如果是列表类型，使用方括号将对应类型包起来，如 [Int] 就表示一个整数列表。</p>\n<h2 id=\"传递-schema-参数\"><a href=\"#%E4%BC%A0%E9%80%92-schema-%E5%8F%82%E6%95%B0\" aria-label=\"传递 schema 参数 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>传递 schema 参数</h2>\n<p>可以在 schema 中的字段后定义改字段需要的参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">rollDice</span><span class=\"token punctuation\">(</span>numDice<span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> numSides<span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在服务端的 resolver 函数中获取到这些参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">rollDice</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> numDice<span class=\"token punctuation\">,</span> numSides <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do somethings</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"在-schema-中定义变量\"><a href=\"#%E5%9C%A8-schema-%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\" aria-label=\"在 schema 中定义变量 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 schema 中定义变量</h3>\n<p>可以使用 $ 语法来定义一条查询中的变量，并将变量作为单独映射来传递。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token function\">RollDice</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$dice<span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> $sides<span class=\"token punctuation\">:</span> Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">rollDice</span><span class=\"token punctuation\">(</span>numDice<span class=\"token punctuation\">:</span> $dice<span class=\"token punctuation\">,</span> numSides<span class=\"token punctuation\">:</span> $sides<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"自定义对象类型\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B\" aria-label=\"自定义对象类型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义对象类型</h2>\n<p>在 GraphQL schema language 中，定义一个新的对象类型就和定义 Query 类型一样。每个对象可以有返回指定类型的字段，以及带有参数的方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type RandomDie <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">roll</span><span class=\"token punctuation\">(</span>numRolls<span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getDie</span><span class=\"token punctuation\">(</span>numSides<span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> RandomDie\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于 resolver 来说，可以通过 ES6 class 来定义类：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomDie</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numSides</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numSides <span class=\"token operator\">=</span> numSides<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">roll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>numRolls<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token comment\">// do somethings</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getDie</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>numSides<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomDie</span><span class=\"token punctuation\">(</span>numSides <span class=\"token operator\">||</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"变更和输入类型\"><a href=\"#%E5%8F%98%E6%9B%B4%E5%92%8C%E8%BE%93%E5%85%A5%E7%B1%BB%E5%9E%8B\" aria-label=\"变更和输入类型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变更和输入类型</h2>\n<p>在 GraphQL 中，使用 Mutation 作为入口端点即可插入或者修改已有数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 修改已有数据</span>\ntype Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 查询数据</span>\ntype Query <span class=\"token punctuation\">{</span>\n  getMessage<span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以通过 <code class=\"language-text\">input</code> 关键字来定义输入类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 输入参数类型</span>\ninput MessageInput <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String\n  author<span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\ntype Message <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n  content<span class=\"token punctuation\">:</span> String\n  author<span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span>\n\ntype Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createMessage</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> MessageInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n  <span class=\"token function\">updateMessage</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">:</span> MessageInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>必须在 GraphQL 查询前面使用关键字 mutation 才能调用变更，并将数据作为 JSON 对象以传入输入类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`mutation CreateMessage($input: MessageInput) {\n  createMessage(input: $input) {\n    id\n  }\n}`</span></span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">,</span>\n  variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      author<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">,</span>\n      content<span class=\"token punctuation\">:</span> content<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>查询使用 query, 即查询与修改的区别是传入 API 中的 query 参数不同，修改需要以 mutation 开头。不同的服务器实现传递格式应该不同</em></p>\n<h2 id=\"通过对象创建-schema\"><a href=\"#%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA-schema\" aria-label=\"通过对象创建 schema permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过对象创建 schema</h2>\n<p>使用 GraphQLSchema 构造函数创建 Schema 时，定义 Query 和 Mutation 类型时不用单纯的 Schema Language，而是像对象一样创建它们。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用对象创建</span>\n<span class=\"token keyword\">var</span> queryType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">graphql<span class=\"token punctuation\">.</span>GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Query'</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> userType<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// `args` 描述了 `user` 查询接受的参数</span>\n      args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> graphql<span class=\"token punctuation\">.</span>GraphQLString <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// resolver </span>\n      <span class=\"token function-variable function\">resolve</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fakeDatabase<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不同的是，使用对象创建 scheme 时会将 resolver 函数一起包括在对象中，而不是分开写。</p>","timeToRead":3}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"89fcd788-e9ad-5b1e-880c-f98da4f3020c"}}