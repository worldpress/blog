{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"e16d6f29-4f5a-52f9-8b8f-cf03e3aab3f1","frontmatter":{"title":"Sass 初探","date":"2016/06/07","tags":["CSS","Sass"]},"fields":{"slug":"Sass初探"},"excerpt":"为什么学 Sass 说起来其实很早就知道   这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用   还是 ，最后用了变量名用   开头的 Less（可能是 PHP 的原因，对   开头的变量名没什么好感）。 最近正在看  ，源码是用 Sass 写的。  之前也是用…","timeToRead":3}},{"node":{"id":"600013e1-4c51-58d0-80e2-04e1a2fcb39c","frontmatter":{"title":"使用 Nokogiri 解析 HTML","date":"2016/05/28","tags":["Ruby"]},"fields":{"slug":"使用Nokogiri解析HTML"},"excerpt":"Nokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。 解析 HTML 文档 使用   解析 HTML 将会生成  。\n生成该对象的方式有三种，分别是通过字符串解析，通过文件解析，通过网络解析。…","timeToRead":2}},{"node":{"id":"89268327-0fd9-55c8-ad60-6eed2e1b236f","frontmatter":{"title":"使用 JavaScript 实现简单的拖拽","date":"2016/05/14","tags":["JavaScript","前端"]},"fields":{"slug":"使用JavaScript实现简单的拖拽"},"excerpt":"步骤 使用 JavaScript 实现拖拽的步骤： 让元素捕获事件（mousedown, mousemove & mouseup） 单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置 拖动鼠标，触发 mousemove，不断的获取鼠标的位置，并通过计算…","timeToRead":2}},{"node":{"id":"86377414-7f1c-5f89-b7bf-04ad416a8e83","frontmatter":{"title":"记第一次面试","date":"2016/05/14","tags":["面试"]},"fields":{"slug":"记第一次面试"},"excerpt":"记录第一次面试 流水账 想到什么写什么 第一次正正经经的去面试，虽然只是个软件开发暑期实习生。 刚开始是在网上无聊的逛 V2EX 什么的，然后看了看 conde 社区。后来神不知鬼不觉的不知道为什么就跑到了 Ruby China 去了，又神不知鬼不觉的跑去看了招聘的版块。 其实…","timeToRead":1}},{"node":{"id":"cb840a04-20c4-5b6c-b3c1-853309049d81","frontmatter":{"title":"从 optimizeCb 说起","date":"2016/05/03","tags":["JavaScript","前端","Underscore"]},"fields":{"slug":"从optimizeCb说起"},"excerpt":"optimizeCb 在   中的内部函数  ，顾名思义就是 optimize callback，即优化回调函数。 optimizeCb: 它是这样处理回调的，当回调函数指定上下文环境时，根据   来分情况使用  ，不同情况的\n区别只是   除了上下文环境之外的函数参数的个数不…","timeToRead":2}},{"node":{"id":"2ec39d58-5331-5350-a687-7fad199d9ed7","frontmatter":{"title":"不合常理的变量提升","date":"2016/04/28","tags":["JavaScript","前端"]},"fields":{"slug":"不合常理的变量提升"},"excerpt":"变量提升 合乎常理的预期 按照合乎常理的预期，程序应该是由上至下一行一行执行的，如果使用了之前没有定义的变量的话，正确的反应应该是会报错，就象下面这段 C++ 代码： 并不完全正确 实际上合乎常理的预期并不是“完全正确”的，在 JavaScript 中并不符合直觉。 例如这段 …","timeToRead":2}},{"node":{"id":"e49a6101-47e7-5d42-8c38-439e7fdeb27d","frontmatter":{"title":"事件流：冒泡与捕获","date":"2016/04/16","tags":["JavaScript","前端"]},"fields":{"slug":"事件流冒泡与捕获"},"excerpt":"事件流 事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。 事件冒泡 事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document 对象…","timeToRead":3}},{"node":{"id":"06ba45c5-9728-5039-8fed-fb4e21d5238a","frontmatter":{"title":"JavaScript 作用域与闭包","date":"2016/04/04","tags":["JavaScript","前端"]},"fields":{"slug":"JavaScript作用域与闭包"},"excerpt":"作用域 在 JavaScript 中变量的作用域与其他语言不同，JavaScript 的作用域不是由   来界定，而是函数。所以循环实际上是在全局作用域中。 全局变量 & 局部变量 JavaScript 变量的作用域分为两种，全局和局部。 在 JavaScript 中声明全局变…","timeToRead":1}},{"node":{"id":"7e334550-4989-5470-8859-820b897e7e18","frontmatter":{"title":"奇怪的 JavaScript 原型链","date":"2016/03/29","tags":["JavaScript","前端"]},"fields":{"slug":"奇怪的JavaScript原型链"},"excerpt":"在 JavaScript 中一切皆为对象（Object），但是却与 Java，C++ 等语言不同，没有“类”的概念，也没有所谓的“子类”和“父类”。JavaScript 中的对象是基于原型（prototype）来实现面向对象的，靠奇怪的原型链（prototype chain）来…","timeToRead":1}},{"node":{"id":"4ce09291-6fb4-5a49-88f7-3d81b84988ef","frontmatter":{"title":"apply, call 与 bind 的区别","date":"2016/03/20","tags":["JavaScript","前端"]},"fields":{"slug":"applycall与bind的区别"},"excerpt":"最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到   部分，看到了几个熟悉的字眼， ，  和  。好像是有些面试题里面有，遂搞清楚了记录下。 apply() 与 call() 每个函数都包含两个非继承的方法：  和  。两个方法的用途都是在特定的作…","timeToRead":2}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"page":4,"skip":30,"limit":10,"total":50}}