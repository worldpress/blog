{"data":{"markdownRemark":{"id":"e757f28c-abe5-5fe3-a107-74a2ee7769a4","frontmatter":{"title":"万恶的BOM：ï»¿ 与 \\ufeff","date":"2017/07/24","tags":["CSS","前端"],"issueId":44},"fields":{"slug":"/posts/2017072544"},"excerpt":"最近在搞一个 Sass 文件的编译插件，主要使用 node-sass 来进行编译，在这过程中遇到一个蛮坑的小问题。 在不压缩的情况下使用 node-sass 进行编译的样式文件没有什么问题，可以正确的编译出该有的样式。可是当进行压缩时，就出了问题了。压缩后的文件莫名奇妙的在文件…","html":"<p>最近在搞一个 Sass 文件的编译插件，主要使用 node-sass 来进行编译，在这过程中遇到一个蛮坑的小问题。</p>\n<p>在不压缩的情况下使用 node-sass 进行编译的样式文件没有什么问题，可以正确的编译出该有的样式。可是当进行压缩时，就出了问题了。压缩后的文件莫名奇妙的在文件最开头多了几个奇怪的字符：<code class=\"language-text\">ï»¿</code>。</p>\n<!--more-->\n<p>本着有什么不懂先 Google 的原则，搜索 <code class=\"language-text\">&quot;ï»¿&quot;</code>。发现 stack overflow 上有个相关的问题：<a href=\"https://stackoverflow.com/questions/3255993/how-do-i-remove-%C3%AF-from-the-beginning-of-a-file\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How do I remove ï»¿ from the beginning of a file?</a>。原来这是一个叫 BOM（Byte Order Mark）的东西，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码。</p>\n<blockquote>\n<p>在网页上使用BOM是个错误。BOM设计出来不是用来支持HTML和XML的。</p>\n</blockquote>\n<p>上面这句来自 <a href=\"https://www.zhihu.com/question/20167122/answer/14199022\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？</a> 的回答。我想补充一下，更可恶的事情是 BOM 在 CSS 中。</p>\n<p>由于在文件开头多出了一个 BOM，使得压缩后的所有样式都失效了。一开始我尝试在文件最开头加上 <code class=\"language-text\">@charset &quot;utf-8&quot;</code>，但是并没有什么用。不过发现了在加上 <code class=\"language-text\">@charset &quot;utf-8&quot;</code> 后，变成了这样：</p>\n<p><img src=\"https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/tnh93.jpg\" alt=\"BOM\"></p>\n<p>多出来的一个小红点，鼠标移上去显示 <code class=\"language-text\">&quot;\\ufeff&quot;</code>。找到罪魁祸首了，搜索 <code class=\"language-text\">&quot;\\ufeff&quot;</code> 发现有篇关于 JavaScript 中处理 BOM 的文章：<a href=\"https://imququ.com/post/bom-and-javascript-trim.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BOM 和 JavaScript 中的 trim</a>。</p>\n<p>最后得到解决方案，在编译后的样式中进行替换，移除 <code class=\"language-text\">\\ufeff</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">css <span class=\"token operator\">=</span> css<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ufeff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>虽然解决方案蛮简单的，但是在搜索答案与编码测试的过程中学到了蛮多。编码问题还是要注意的，虽然无法避免遇到 utf-8 with BOM，但是也应该尽量只保存为 utf-8 without BOM 编码格式。如果遇到奇怪的字符，那八成就是编码问题了。</p>","timeToRead":1}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e757f28c-abe5-5fe3-a107-74a2ee7769a4"}}