{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"d2d1aa14-2094-5253-931a-ccb68f791df7","frontmatter":{"title":"Vue 中使用 highlight.js","date":"2016/07/13","tags":["Vue","前端"]},"excerpt":"今天遇到一个问题：在使用 vue 的练手项目中，渲染的 HTML 里   标签中的代码没有代码高亮。 遂想到用 highlight.js 来解决，按照平常那样在 HTML 文件中引入   和   文件，然后在  中加上一句  。但是却没有效果。 在 Vue.js 的论坛上找到了…","timeToRead":1}},{"node":{"id":"45018382-86c1-5927-8b85-3734893e3587","frontmatter":{"title":"CSS 实现垂直居中","date":"2016/06/29","tags":["CSS","前端"]},"excerpt":"我们有这样一个结构的 HTML： 如果我们要实现   在   中垂直居中。 通常第一印象会想起给父元素设置相对定位，给子元素设置绝对定位。这样子元素就相对于父元素定位，再通过   与   各偏移 50% 父元素宽度，使用   来修正子元素的位置。 通过这种方式可以使得子元素在父…","timeToRead":1}},{"node":{"id":"e16d6f29-4f5a-52f9-8b8f-cf03e3aab3f1","frontmatter":{"title":"Sass 初探","date":"2016/06/07","tags":["CSS","Sass"]},"excerpt":"为什么学 Sass 说起来其实很早就知道   这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用   还是 ，最后用了变量名用   开头的 Less（可能是 PHP 的原因，对   开头的变量名没什么好感）。 最近正在看  ，源码是用 Sass 写的。  之前也是用…","timeToRead":3}},{"node":{"id":"600013e1-4c51-58d0-80e2-04e1a2fcb39c","frontmatter":{"title":"使用 Nokogiri 解析 HTML","date":"2016/05/28","tags":["Nokogiri","Ruby"]},"excerpt":"Nokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。 解析 HTML 文档 使用   解析 HTML 将会生成  。\n生成该对象的方式有三种，分别是通过字符串解析，通过文件解析，通过网络解析。…","timeToRead":2}},{"node":{"id":"89268327-0fd9-55c8-ad60-6eed2e1b236f","frontmatter":{"title":"使用 JavaScript 实现简单的拖拽","date":"2016/05/14","tags":["JavaScript","前端"]},"excerpt":"步骤 使用 JavaScript 实现拖拽的步骤： 让元素捕获事件（mousedown, mousemove & mouseup） 单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置 拖动鼠标，触发 mousemove，不断的获取鼠标的位置，并通过计算…","timeToRead":2}},{"node":{"id":"86377414-7f1c-5f89-b7bf-04ad416a8e83","frontmatter":{"title":"记第一次面试","date":"2016/05/14","tags":["面试","实习"]},"excerpt":"记录第一次面试 流水账 想到什么写什么 第一次正正经经的去面试，虽然只是个软件开发暑期实习生。 刚开始是在网上无聊的逛 V2EX 什么的，然后看了看 conde 社区。后来神不知鬼不觉的不知道为什么就跑到了 Ruby China 去了，又神不知鬼不觉的跑去看了招聘的版块。 其实…","timeToRead":1}},{"node":{"id":"cb840a04-20c4-5b6c-b3c1-853309049d81","frontmatter":{"title":"从 optimizeCb 说起","date":"2016/05/03","tags":["JavaScript","前端","Underscore"]},"excerpt":"optimizeCb 在   中的内部函数  ，顾名思义就是 optimize callback，即优化回调函数。 optimizeCb: 它是这样处理回调的，当回调函数指定上下文环境时，根据   来分情况使用  ，不同情况的\n区别只是   除了上下文环境之外的函数参数的个数不…","timeToRead":2}},{"node":{"id":"2ec39d58-5331-5350-a687-7fad199d9ed7","frontmatter":{"title":"不合常理的变量提升","date":"2016/04/28","tags":["JavaScript","前端"]},"excerpt":"变量提升 合乎常理的预期 按照合乎常理的预期，程序应该是由上至下一行一行执行的，如果使用了之前没有定义的变量的话，正确的反应应该是会报错，就象下面这段 C++ 代码： 并不完全正确 实际上合乎常理的预期并不是“完全正确”的，在 JavaScript 中并不符合直觉。 例如这段 …","timeToRead":2}},{"node":{"id":"e49a6101-47e7-5d42-8c38-439e7fdeb27d","frontmatter":{"title":"事件流：冒泡与捕获","date":"2016/04/16","tags":["JavaScript","前端"]},"excerpt":"事件流 事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。 事件冒泡 事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document 对象…","timeToRead":3}},{"node":{"id":"06ba45c5-9728-5039-8fed-fb4e21d5238a","frontmatter":{"title":"作用域与闭包","date":"2016/04/04","tags":["JavaScript","前端"]},"excerpt":"作用域 在 JavaScript 中变量的作用域与其他语言不同，JavaScript 的作用域不是由   来界定，而是函数。所以循环实际上是在全局作用域中。 全局变量 & 局部变量 JavaScript 变量的作用域分为两种，全局和局部。 在 JavaScript 中声明全局变…","timeToRead":1}},{"node":{"id":"7e334550-4989-5470-8859-820b897e7e18","frontmatter":{"title":"奇怪的原型链","date":"2016/03/29","tags":["JavaScript","前端"]},"excerpt":"在 JavaScript 中一切皆为对象（Object），但是却与 Java，C++ 等语言不同，没有“类”的概念，也没有所谓的“子类”和“父类”。JavaScript 中的对象是基于原型（prototype）来实现面向对象的，靠奇怪的原型链（prototype chain）来…","timeToRead":1}},{"node":{"id":"4ce09291-6fb4-5a49-88f7-3d81b84988ef","frontmatter":{"title":"apply, call 与 bind 的区别","date":"2016/03/20","tags":["JavaScript","前端"]},"excerpt":"最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到   部分，看到了几个熟悉的字眼， ，  和  。好像是有些面试题里面有，遂搞清楚了记录下。 apply() 与 call() 每个函数都包含两个非继承的方法：  和  。两个方法的用途都是在特定的作…","timeToRead":2}},{"node":{"id":"672a0117-7aca-5fe3-b057-e038888193f2","frontmatter":{"title":"Jade 模板引擎","date":"2016/02/29","tags":["Jade","模版引擎","前端"]},"excerpt":"最近在改一个 Hexo 的主题  apollo 。然后看到这个主题用的是叫做 Jade 的模版引擎写的。之前了解过几个模版引擎 ejs，swig 什么的，但是这些都是在原有的 HTML 中插标签，看起来有点乱。看到 Jade 后就深深的被它那如同 Python 的缩进语法深深吸…","timeToRead":4}},{"node":{"id":"79b47b85-e049-59a7-a308-3dfdc101cb2b","frontmatter":{"title":"Python 多线程初步了解","date":"2016/02/20","tags":["Python"]},"excerpt":"这两天在写  Nada  的下载功能，遇到一个问题，在下载歌曲的时候整个界面都会卡住，必须等待下载完成才能够恢复，因为写的时候是直接顺序执行的，没有多线程。之前在写播放功能的时候是参考了别人的代码，自己其实对多线程部分不是很了解。然后趁着晚上了解一下 Python 的 thre…","timeToRead":2}},{"node":{"id":"38d6d3ee-d301-5fb7-b69a-0c0b7d0621d7","frontmatter":{"title":"Python curses 模块","date":"2016/01/23","tags":["Python"]},"excerpt":"Python 中的 curses 模块封装了 C 语言的 curses。curses 是一个能够提供基于文本终端窗口功能的动态库。它可以创建和管理一个窗口，使用8中不同的颜色，提供鼠标以及键盘支持。与 Tkinter 不同的是 curses 是基于终端的。 curses 支持 …","timeToRead":1}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"page":3,"skip":30,"limit":15,"total":52}}