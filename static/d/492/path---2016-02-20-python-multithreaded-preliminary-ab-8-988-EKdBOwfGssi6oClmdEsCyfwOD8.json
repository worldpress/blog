{"data":{"markdownRemark":{"id":"79b47b85-e049-59a7-a308-3dfdc101cb2b","frontmatter":{"title":"Python 多线程初步了解","date":"2016/02/20","tags":["Python"],"issueId":null},"excerpt":"这两天在写  Nada  的下载功能，遇到一个问题，在下载歌曲的时候整个界面都会卡住，必须等待下载完成才能够恢复，因为写的时候是直接顺序执行的，没有多线程。之前在写播放功能的时候是参考了别人的代码，自己其实对多线程部分不是很了解。然后趁着晚上了解一下 Python 的 thre…","html":"<p>这两天在写 <a href=\"https://www.github.com/ahonn/Nada\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nada</a> 的下载功能，遇到一个问题，在下载歌曲的时候整个界面都会卡住，必须等待下载完成才能够恢复，因为写的时候是直接顺序执行的，没有多线程。之前在写播放功能的时候是参考了别人的代码，自己其实对多线程部分不是很了解。然后趁着晚上了解一下 Python 的 thread 和 treading 模块。</p>\n<h2 id=\"Python-多线程支持\"><a href=\"#Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81\" aria-label=\"Python 多线程支持 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python 多线程支持</h2>\n<p>Pyhton 标准库提供了 thread 和 threading 模块来支持多线程，这意味着不需要重新下载这两个模块，只需要在代码中 import 这两个模块就可以了。</p>\n<h2 id=\"thread-模块\"><a href=\"#thread-%E6%A8%A1%E5%9D%97\" aria-label=\"thread 模块 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread 模块</h2>\n<p>thread 模块是以低级、原始的方式来处理和控制线程，提供了一个简单的锁（相对于 threading 模块的锁的感觉来说的确是比较简单）。相对于 threading 模块来说，thread 模块更加灵活。</p>\n<!--more-->\n<ul>\n<li>\n<p><code class=\"language-text\">thread.start_new_thread(function, args [, kwargs])</code>\n创建一个新的线程，返回该线程的标识符。线程执行后将制动退出，即函数执行完毕。当遇到未处理的异常时也将退出，但不影响其他线程。</p>\n<ul>\n<li><code class=\"language-text\">function</code>：线程执行的函数。</li>\n<li><code class=\"language-text\">args</code>：线程执行函数的参数。</li>\n<li><code class=\"language-text\">kwargs</code>：为函数提供命名参数字典。</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">thread.exit()</code>\n结束当前进程，触发 SystemExit 异常。</p>\n</li>\n<li>\n<p><code class=\"language-text\">thread.get_ident()</code>\n返回当前线程的标识符，标识符为一个非零整数。</p>\n</li>\n<li>\n<p><code class=\"language-text\">thread.interrupt_main()</code>\n触发主线程的 KeyboardInterrupt 异常，子线程使用此方法来终端主线程。</p>\n</li>\n<li>\n<p><code class=\"language-text\">thread.allocate_lock()</code>\n创建 thread.LockType 锁类型，即为线程锁</p>\n</li>\n</ul>\n<h3 id=\"threadLockType\"><a href=\"#threadLockType\" aria-label=\"threadLockType permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread.LockType</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Lock.acquire([ waitflag ])</code>\n获取锁，返回一个布尔值，成功返回 True，否则返回 False。</p>\n<p><code class=\"language-text\">waitflag</code>：默认值为非零整数，表示如果锁已经被其他线程占用，那么当前线程等待，直到其他线程释放锁，即为同步阻塞。如果将参数设置为 0，即表示当前线程会尝试获取锁，不管锁是否被占用，线程都不会等待。</p>\n</li>\n<li>\n<p><code class=\"language-text\">Lock.release()</code>\n释放所占用的锁。</p>\n</li>\n<li>\n<p><code class=\"language-text\">Lock.locked()</code>\n判断锁是否被占用。</p>\n</li>\n</ul>\n<h2 id=\"threading-模块\"><a href=\"#threading-%E6%A8%A1%E5%9D%97\" aria-label=\"threading 模块 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>threading 模块</h2>\n<p>threading 模块是对 thread 模块的二次封装，提供更方便的 API 使用。大多数多线程使用 threading 模块编写。提供更复杂的锁（Lock &#x26; RLock），条件，事件等。</p>\n<ul>\n<li>\n<p><code class=\"language-text\">threading.Thread(group=None, target=None,name=None, args=(), kwargs={})</code>\n返回一个Thread对象，每个Thread对象代表着一个线程，可以通过start()方法，开始运行。</p>\n<ul>\n<li><code class=\"language-text\">group</code>：应该为 None ，该参数是留给未来的扩展时使用的</li>\n<li><code class=\"language-text\">target</code>：可调用对象（函数），在线程启动后执行</li>\n<li><code class=\"language-text\">name</code>：线程的名字，默认值为“Thread-N”，N 是一个十进制整数</li>\n<li><code class=\"language-text\">args</code>：target 调用对象的参数列表</li>\n<li><code class=\"language-text\">kwargs</code>：target 调用对象的关键字参数</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">threading.activeCount()</code>\n返回当前存活线程数</p>\n</li>\n<li>\n<p><code class=\"language-text\">threading.currentThread()</code>\n返回当前 Thread 对象</p>\n</li>\n<li>\n<p><code class=\"language-text\">threading.enumerate()</code>\n返回当前存活的 Thread 对象列表</p>\n</li>\n<li>\n<p><code class=\"language-text\">threading.Lock()</code>\n返回一个原始锁对象</p>\n</li>\n</ul>\n<h3 id=\"threadingThread\"><a href=\"#threadingThread\" aria-label=\"threadingThread permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>threading.Thread</h3>\n<p>有两种方式来创建 threading.Thread 对象。一种方式是继承 Thread 类，重写父类的 run 方法，另一种方式是通过 threading.Thread() 函数创建。</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Thread.start()</code>\n启动线程</p>\n</li>\n<li>\n<p><code class=\"language-text\">Thread.join([timeout])</code>\n阻塞当前环境进程，直到调用此方法的线程终止，或者达到指定的 timeout</p>\n</li>\n<li>\n<p><code class=\"language-text\">Thread.getName()</code> &#x26; <code class=\"language-text\">Thread.setName()</code>\n获取线程名称 &#x26; 设置线程名称</p>\n</li>\n<li>\n<p><code class=\"language-text\">Thread.isAlive()</code>\n返回线程是否存活。返回 True 在线程开始运行直到终止。</p>\n</li>\n</ul>\n<h3 id=\"threadingLock\"><a href=\"#threadingLock\" aria-label=\"threadingLock permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>threading.Lock</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Lock.acquire([blocking])</code>\n获取锁。<code class=\"language-text\">blocking</code> 默认为 true，阻塞直到锁被释放。当 <code class=\"language-text\">blocking</code> 为 False 时，则不阻塞。</p>\n</li>\n<li>\n<p><code class=\"language-text\">Lock.release()</code>\n释放锁，没有返回值。当没有锁时，将会抛出 ThreadError 异常。</p>\n</li>\n</ul>","timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"79b47b85-e049-59a7-a308-3dfdc101cb2b","redirect":true,"redirectUrl":"/2016/02/20/duō xiàn chéng chū bù liǎo jiě/"}}