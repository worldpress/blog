{"data":{"markdownRemark":{"id":"6b62e769-c27f-5041-b8cc-dc68fa59b369","frontmatter":{"title":"从 @babel/register 到 require()","date":"2019/04/09","tags":["Babel","Node.js"],"issueId":51},"fields":{"slug":"/posts/2019040951"},"excerpt":"通常我们会用 babel 来将浏览器未兼容的新语法编译为酒语法，以便在旧浏览器或者环境下运行。\n除了编译运行外，babel 还提供了 @babel/register 来即时编译运行（在 node 中使用，废话）。 如何使用 @babel/register 使用 @babel/r…","html":"<p>通常我们会用 babel 来将浏览器未兼容的新语法编译为酒语法，以便在旧浏览器或者环境下运行。\n除了编译运行外，babel 还提供了 @babel/register 来即时编译运行（在 node 中使用，废话）。</p>\n<h2 id=\"如何使用-babelregister\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-babelregister\" aria-label=\"如何使用 babelregister permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用 @babel/register</h2>\n<p>使用 @babel/register 的方式很简单，只需要将以下代码放在需要编译运行的代码引入前：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>值得注意的是当所需的功能需要使用  polyfill 来实现时，你必须将它们逐个引入。</p>\n<p>那么 @babel/register 是怎么通过这一行代码使得后面引入的代码会即时编译之后再运行呢？答案是通过 node 的 require 钩子来在加载代码时进行即时编译。（ @babel/register 调用了一个名为 <a href=\"https://github.com/ariporad/pirates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pirates</a> 的库来实现）。</p>\n<p>相关代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> addHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pirates\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hookExtensions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>piratesRevert<span class=\"token punctuation\">)</span> <span class=\"token function\">piratesRevert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  piratesRevert <span class=\"token operator\">=</span> <span class=\"token function\">addHook</span><span class=\"token punctuation\">(</span>compileHook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> exts<span class=\"token punctuation\">,</span> ignoreNodeModules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h2 id=\"怎么添加-require-钩子\"><a href=\"#%E6%80%8E%E4%B9%88%E6%B7%BB%E5%8A%A0-require-%E9%92%A9%E5%AD%90\" aria-label=\"怎么添加 require 钩子 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么添加 require 钩子</h2>\n<p>其实原理非常简单，只要在 Module.<em>extensions 中处理对应文件扩展名的函数前执行钩子函数就可以了。在 node 内部的模块加载流程中会通过 Module.</em>extensions  查找对应的处理函数来处理不同的文件。具体代码见  <a href=\"https://github.com/nodejs/node/blob/v11.x/lib/internal/modules/cjs/loader.js#L664\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/nodejs/node/blob/v11.x/lib/internal/modules/cjs/loader.js#L664</a> </p>\n<p>而在 Module._extensions 上默认实现了对 .js / .json / .node 文件的处理：</p>\n<ul>\n<li>对于 .js 文件，通过 <code class=\"language-text\">fs.readFileSync()</code> 读取文件，并调用 <code class=\"language-text\">module._compile()</code> 进行编译返回</li>\n<li>对于 .json 文件，读取文件后尝试使用 <code class=\"language-text\">JSON.parse()</code> 解析，并赋值给 <code class=\"language-text\">module.exports</code> 返回</li>\n<li>对于 .node 文件，通过 <code class=\"language-text\">process.dlopen</code> 加载 node addons</li>\n</ul>\n<p>所以实际上对于 .js 文件的处理， <code class=\"language-text\">pirates.addHook()</code> 是会重写 <code class=\"language-text\">module._compile()</code>，将传入该函数的文件内容（对于 @babel/register 来说，就是使用新语法的 JavaScript 代码）通过 hook 函数处理之后再使用默认的 <code class=\"language-text\">module._complie()</code> 进行编译。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> oldLoader <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span>_extensions<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nModule<span class=\"token punctuation\">.</span>_extensions<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">newLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  compile <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>_compile<span class=\"token punctuation\">;</span>\n  mod<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_compile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mod<span class=\"token punctuation\">.</span>_compile <span class=\"token operator\">=</span> compile<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newCode <span class=\"token operator\">=</span> <span class=\"token function\">hook</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用钩子函数处理代码</span>\n    <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span>newCode<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将返回的代码传给默认的编译函数</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">oldLoader</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"实现-flow-register\"><a href=\"#%E5%AE%9E%E7%8E%B0-flow-register\" aria-label=\"实现 flow register permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现 flow-register</h2>\n<p>通过以上的描述，我们很容易的可以通过 <a href=\"https://github.com/flowtype/flow-remove-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flow-remove-types</a> 在 require 时去除flow 相关的类型标记并执行代码。</p>\n<p>简单的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* index.js */</span>\n<span class=\"token keyword\">const</span> Module <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> flowRemoveTypes <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flow-remove-types'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> oldLoader <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span>_extensions<span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nModule<span class=\"token punctuation\">.</span>_extensions<span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> compile <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>_compile<span class=\"token punctuation\">;</span>\n  mod<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_compile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mod<span class=\"token punctuation\">.</span>_compile <span class=\"token operator\">=</span> compile<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newCode <span class=\"token operator\">=</span> <span class=\"token function\">flowRemoveTypes</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span>newCode<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">oldLoader</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./hello.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ahonn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* hello.js */</span>\n<span class=\"token comment\">// @flow</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用这种方式就可以定制当 require 某种文件时我们需要的处理逻辑，例如可以指定某种格式的 JSON 文件后缀为 <code class=\"language-text\">.jsonx</code> ，然后通过 require 钩子的方式使用 <a href=\"https://github.com/epoberezkin/ajv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ajv</a> 来更快的解析；或者让 node 环境下能够直接 require wasm 文件并运行。</p>\n<p>虽然 Hack  require 的方式性能不太好（每次 require 新的文件都会执行编译），并且也不推荐使用在生产环境，但是在开发环境下却能够非常方便的无需编译的使用现有代码。另外通过以上了解，也能够更好的理解 node 的模块机制。</p>","timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"6b62e769-c27f-5041-b8cc-dc68fa59b369"}}