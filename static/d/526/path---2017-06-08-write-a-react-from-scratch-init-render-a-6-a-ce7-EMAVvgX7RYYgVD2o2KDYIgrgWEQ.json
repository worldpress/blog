{"data":{"markdownRemark":{"id":"5a700a84-51ca-5469-a063-1a3379824d90","frontmatter":{"title":"React 初始化渲染","date":"2017/06/08","tags":["React","JavaScript","前端"],"issueId":41},"fields":{"slug":"/2017/06/08/React初始化渲染/"},"excerpt":"该文章将阅读 React 初始化渲染相关的代码，并实现一个简单的将 JSX 渲染到页面的功能。（不包括组件生命周期与事件处理相关部分） 源码解析：渲染过程 JSX 解析 我们知道在 React 组件  返回的是 JSX，而 JSX 将会被 babel 转换。JSX 将被转换为 …","html":"<p>该文章将阅读 React 初始化渲染相关的代码，并实现一个简单的将 JSX 渲染到页面的功能。（不包括组件生命周期与事件处理相关部分）</p>\n<!--more-->\n<h2 id=\"源码解析：渲染过程\"><a href=\"#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B\" aria-label=\"源码解析：渲染过程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码解析：渲染过程</h2>\n<h3 id=\"JSX-解析\"><a href=\"#JSX-%E8%A7%A3%E6%9E%90\" aria-label=\"JSX 解析 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX 解析</h3>\n<p>我们知道在 React 组件<code class=\"language-text\">render()</code> 返回的是 JSX，而 JSX 将会被 babel 转换。JSX 将被转换为 <code class=\"language-text\">React.createElement(type, config, children)</code>的形式。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// App.js</span>\n<span class=\"token comment\">// 转换前</span>\nClass App <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">'title'</span><span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 转换后</span>\n<span class=\"token keyword\">var</span> App <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">:</span> <span class=\"token string\">'title'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">React.createElement()</code> 的实现位于 <a href=\"https://github.com/facebook/react/blob/15-stable/src/isomorphic/classic/element/ReactElement.js#L183\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/src/isomorphic/classic/element/ReactElement.js</a></p>\n<p>这里的 <code class=\"language-text\">React.createElement()</code>是用来生成虚拟 DOM 元素，该函数对组件的属性，事件，子组件等进行了处理，并返回值为一个 <code class=\"language-text\">ReactElement</code> 对象（单纯的 JavaScript 对象，仅包括 type, props, key, ref 等属性）。</p>\n<p>这恰好说明了 JSX 中的 <code class=\"language-text\">&lt;h1 id=&#39;title&#39;&gt;hello world&lt;/h1&gt;</code>实际上是 JavaScript 对象，而不是我们通常写的 HTML 标签。</p>\n<h3 id=\"渲染到页面\"><a href=\"#%E6%B8%B2%E6%9F%93%E5%88%B0%E9%A1%B5%E9%9D%A2\" aria-label=\"渲染到页面 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染到页面</h3>\n<p>单单声明了组件而没有渲染到页面上我们是看不见的（废话），所以我们需要使用 <code class=\"language-text\">ReactDOM.render()</code>将其渲染到页面指定位置上。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.html</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">'root'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.js'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">ReactDOM.render()</code> 的实现位于<a href=\"https://github.com/facebook/react/blob/master/src/renderers/dom/stack/client/ReactMount.js#L581\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> </a><a href=\"https://github.com/facebook/react/blob/15-stable/src/renderers/dom/client/ReactMount.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/src/renderers/dom/client/ReactMount.js</a></p>\n<p><code class=\"language-text\">ReactDOM.render()</code> 函数将会根据 <code class=\"language-text\">ReactElement</code> 的类型生成相对应的<code class=\"language-text\">ReactComponent</code> 实例，并调用其 <code class=\"language-text\">mountComponent()</code>函数进行组件加载（返回 HTML片段），递归加载所有组件后，通过 <a href=\"https://github.com/facebook/react/blob/b1768b5a48d1f82e4ef4150e0036c5f846d3758a/src/renderers/dom/shared/setInnerHTML.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">setInnerHTML</a> 将 HTML 渲染到页面上。</p>\n<p>判断需要生成那种 <code class=\"language-text\">ReactComponent</code>实例根据 <code class=\"language-text\">ReactElement</code> 对象的 type 属性来决定。对应 HTML 标签的 type 一般为字符串，而自定义的组件则是大写字母开头的组件函数（自定义组件需要 import，而 HTML 标签不需要）。</p>\n<h4 id=\"生成-ReactComponent\"><a href=\"#%E7%94%9F%E6%88%90-ReactComponent\" aria-label=\"生成 ReactComponent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成 <strong>ReactComponent</strong></h4>\n<p>React 中生成对应的 <code class=\"language-text\">ReactComponent</code>实例由 <code class=\"language-text\">instantiateReactComponent()</code>完成，其实现位于 <a href=\"https://github.com/facebook/react/blob/15-stable/src/renderers/shared/stack/reconciler/instantiateReactComponent.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/src/renderers/shared/stack/reconciler/instantiateReactComponent.js</a></p>\n<p><code class=\"language-text\">ReactComponent</code> 分为 3 种：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ReactEmptyComponent</code>:  空组件（ReactElement 的 type 属性为 null 或 false 的组件），在浏览器中返回 <code class=\"language-text\">ReactDOMEmptyComponent</code>。</p>\n</li>\n<li>\n<p><code class=\"language-text\">ReactHostComponent</code>: 原生组件（ReactElement 为string，number 或 ReactElement 的 type 属性为 string 的组件）。</p>\n<ul>\n<li>\n<p><code class=\"language-text\">createInternalComponent()</code>：该函数用于创建原生组件，在浏览器中返回 <code class=\"language-text\">ReactDOMComponent</code>。</p>\n</li>\n<li>\n<p><code class=\"language-text\">createInstanceForText()</code> : 该函数用于创建纯文本组件，在浏览器中返回 <code class=\"language-text\">ReactDOMTextComponent</code>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ReactCompositeComponent</code>: 自定义组件（ReactElement 的 type 属性为 function）</p>\n</li>\n</ul>\n<p>可以发现 React 与平台解耦，使用 <code class=\"language-text\">ReactEmptyComponent</code> 与 <code class=\"language-text\">ReactHostComponent</code>。而这两种组件会根据平台的不同生成不同的组件对象，在浏览器中则为 <code class=\"language-text\">ReactDOMEmptyComponent</code>、<code class=\"language-text\">ReactDOMComponent</code> 与 <code class=\"language-text\">ReactDOMTextComponent</code>。</p>\n<p>它们通过 <a href=\"https://github.com/facebook/react/blob/15-stable/src/renderers/dom/stack/client/ReactDOMStackInjection.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/src/renderers/dom/stack/client/ReactDOMStackInjection.js</a> 进行注入。</p>\n<p>（ <a href=\"https://github.com/facebook/react/tree/15-stable/src/renderers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/src/renderers </a>路径下包含各个平台上不同的 ReactComponent 实现，包括 react-art/react-dom/react-native。）</p>\n<h2 id=\"从零开始：实现初始化渲染\"><a href=\"#%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B8%B2%E6%9F%93\" aria-label=\"从零开始：实现初始化渲染 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>从零开始：实现初始化渲染</h2>\n<h3 id=\"设置-babel\"><a href=\"#%E8%AE%BE%E7%BD%AE-babel\" aria-label=\"设置 babel permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设置 babel</h3>\n<p>首先我们需要了解 babel 如何转换 JSX：<a href=\"https://babeljs.io/docs/plugins/transform-react-jsx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React JSX transform</a>。</p>\n<p>babel 可以通过<code class=\"language-text\">transform-react-jsx</code>插件来设置解析 JSX 之后调用的函数，默认解析为调用 <code class=\"language-text\">React.createElement()</code>。所以这就是为什么虽然在 JSX 代码中没有使用到 React，却仍然需要导入它。</p>\n<p>通过配置 <code class=\"language-text\">transform-react-jsx</code>插件的 <code class=\"language-text\">pragma</code>选项可以修改解析后调用的函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 修改解析为调用 dom() 函数</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"transform-react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"pragma\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"dom\"</span> <span class=\"token comment\">// 默认 pragma 为 React.createElement</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>babel 将会把 JSX 中的标签名作为第一个参数，把 JSX 中的标签属性作为第二个参数，将标签内容作为剩余的参数。传递这些参数给 <code class=\"language-text\">pragma</code> 选项设置的函数。</p>\n<p><strong>PS: 为了方便起见，我们使用默认的解析为 React.createElement()</strong></p>\n<h3 id=\"实现-createElement\"><a href=\"#%E5%AE%9E%E7%8E%B0-createElement\" aria-label=\"实现 createElement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现 createElement</h3>\n<p><code class=\"language-text\">createElement()</code>接受至少 2 个参数：元素类型 type（字符串表示原生元素，函数表示自定义元素），元素设置 config。其他参数视为元素的子元素 children。并且该函数返回的是一个 <code class=\"language-text\">ReactElement</code> 对象，属性包括 type, props, key, ref。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// element.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReactElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> ref\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span>｛\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span>\n｝</code></pre></div>\n<p>然后需要导出 <code class=\"language-text\">createElement</code>，才能够通过 <code class=\"language-text\">React.createElement()</code> 的方式调用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./element'</span>\n\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    createElement<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React</code></pre></div>\n<p><code class=\"language-text\">ReactElement</code>需要 props, key 与 ref 参数，这三个参数将通过处理 config 与 children 得到。</p>\n<p>我们将从 config 中获取 key 与 ref（若它们存在的话），并且根据 config 得到 props (去除一些不必要的属性)，同时将 children 添加到 props 当中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">let</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ref <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>ref <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>ref\n    <span class=\"token comment\">// 当 key 为数字时，将 key 转换为字符串</span>\n    key <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>key\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> propsName <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 剔除一些不需要的属性（key, ref, __self, __source）</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RESERVED_PROPS</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propsName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propsName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">[</span>propsName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>propsName<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>除此之外，添加对 <code class=\"language-text\">defaultProps</code> 的支持。<code class=\"language-text\">defaultProps</code> 的使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// App.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\nApp<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ahonn\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当传入 App 组件的 props 中不包含 name 时，设置默认的 name 为 \"ahonn\"。具体实现：当 ReactElement 的 type 属性为组件函数且包含 defaultProps 时遍历 props，若 props 中不包含  defaultProps 中的属性时，设置默认的 props。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">&amp;&amp;</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> defaultProps <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span>defaultProps\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> propsName <span class=\"token keyword\">in</span> defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propsName<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                props<span class=\"token punctuation\">[</span>propsName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> defaultProps<span class=\"token punctuation\">[</span>propsName<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>目前为止完成了将 JSX 解析为函数调用（这部分由 babel 完成），调用 <code class=\"language-text\">React.createElement()</code> 生成 <code class=\"language-text\">ReactElement</code> 对象。</p>\n<p>接下来将实现 <code class=\"language-text\">instantiateReactComponent()</code>，通过 ReactELemnt 生成相对应的 <code class=\"language-text\">ReactComponent</code> 实例。</p>\n<h3 id=\"实现工厂方法-instantiateReactComponent\"><a href=\"#%E5%AE%9E%E7%8E%B0%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95-instantiateReactComponent\" aria-label=\"实现工厂方法 instantiateReactComponent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现工厂方法 instantiateReactComponent</h3>\n<p><code class=\"language-text\">instantiateReactComponent(element)</code>接受一个参数 element，该参数可以是 ReactElement 对象，string，number，false 或者 null。</p>\n<p>我们将只考虑 Web 端，而不像 React 一样使用适配器模式进行解耦。</p>\n<p>ReactElement 生成相应 ReactComponent 实例的规则：</p>\n<ul>\n<li>\n<p>element 为 null 或 false 时，生成 ReactDOMEmptyComponent 对象实例</p>\n</li>\n<li>\n<p>element 为 string 或者 number 时，生成 ReactDOMTextComponent 对象实例</p>\n</li>\n<li>\n<p>element 为 object</p>\n<ul>\n<li>\n<p>element.type 为 string 时，生成 ReactDOMComponent 对象实例</p>\n</li>\n<li>\n<p>element.type 为 function（组件函数）时，生成 ReactCompositeComponent 对象实例</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// virtual-dom.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">instantiateReactComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> element <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactDOMEmptyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> element <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactDOMTextComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactDomComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactCompositeComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> instance\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"实现-ReactComponent\"><a href=\"#%E5%AE%9E%E7%8E%B0-ReactComponent\" aria-label=\"实现 ReactComponent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现 ReactComponent</h3>\n<p>现在，我们需要有不同的 <code class=\"language-text\">ReactComponent</code> 类以供 <code class=\"language-text\">instantiateReactComponent()</code>使用。同时需要实现每个类的 <code class=\"language-text\">mountComponent()</code> 方法来返回对应的 HTML 片段。</p>\n<p><strong>ReactDOMEmptyComponent</strong></p>\n<p><code class=\"language-text\">ReactDOMEmptyComponent</code> 表示空组件， <code class=\"language-text\">mountComponent()</code> 方法返回空字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReactDOMEmptyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ReactDOMTextComponent</strong></p>\n<p>ReactDOMTextComponent 表示 DOM 文本组件，<code class=\"language-text\">mountComponent()</code>方法返回对应的字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReactDOMTextComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element <span class=\"token operator\">=</span> text\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stringText <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> text\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rootID <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rootID <span class=\"token operator\">=</span> rootID\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stringText\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ReactDOMComponent</strong></p>\n<p>ReactDOMComponent 表示原生组件，即浏览器支持的标签（div, p, h1, etc.）。<code class=\"language-text\">mountConponent()</code> 方法返回对应的 HTML 字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReactDomComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tag <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element <span class=\"token operator\">=</span> element\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tag <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rootID <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rootID <span class=\"token operator\">=</span> rootID\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMComponent\\'s Element.type must be string'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> `</span></span>\n    <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element<span class=\"token punctuation\">.</span>props\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> propsName <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propsName <span class=\"token operator\">===</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> propsValue <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>propsName<span class=\"token punctuation\">]</span>\n      ret <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propsName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propsValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n    ret <span class=\"token operator\">+=</span> <span class=\"token string\">'>'</span>\n\n    <span class=\"token keyword\">let</span> tagContent <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tagContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_mountChildren</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    ret <span class=\"token operator\">+=</span> tagContent\n    ret <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>`</span></span>\n    <span class=\"token keyword\">return</span> ret\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ReactDOMComponent</code> 的 <code class=\"language-text\">mountComponent()</code>方法会相对复杂一点。具体实现思路是，通过 <code class=\"language-text\">ReactElement</code> 的 type 与 props 属性拼接对应的 HTML 标签。处理 props 的时候需要跳过 children 属性，因为需要将子组件放在当前组件中。</p>\n<p>当存在子组件（children）时，调用 <code class=\"language-text\">_mountChildren(children)</code>将组件转换为对应的 HTML 片段。具体过程是遍历 children，转换为 <code class=\"language-text\">ReactComponent</code> 并调用其 <code class=\"language-text\">mountComponent()</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">_mountChildren</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> childrenComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateReactComponent</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">+=</span> childrenComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ReactCompositeComponent</strong></p>\n<p>ReactCompositeComponent 表示自定义的组件，<code class=\"language-text\">mountComponent()</code>方法将根据提供的组件函数（element.type）实例化，并调用该组件的 <code class=\"language-text\">render()</code>方法返回 <code class=\"language-text\">ReactElement</code> 对象。再通过<code class=\"language-text\">instantiateReactComponent()</code> 生成对应的 <code class=\"language-text\">ReactComponent</code>，最后执行该 <code class=\"language-text\">ReactComponent</code> 的<code class=\"language-text\">mountComponent()</code>方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReactCompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element <span class=\"token operator\">=</span> element\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rootId <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rootId <span class=\"token operator\">=</span> rootID\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CompositeComponent\\'s Element.type must be function'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element<span class=\"token punctuation\">.</span>type\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element<span class=\"token punctuation\">.</span>props\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> renderedElement <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateReactComponent</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> renderedResult <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span>rootID<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> renderedResult\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过 ReactCompositeComponent 将之前的 ReactComponent 联系起来，并递归调用 <code class=\"language-text\">mountComponent</code>方法得到一段 HTML。最后 <code class=\"language-text\">render()</code>通过 node.innerHTML 将 HTML 字符串填到页面上对应的容器中。</p>\n<h3 id=\"实现-render\"><a href=\"#%E5%AE%9E%E7%8E%B0-render\" aria-label=\"实现 render permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现 render</h3>\n<p>最后将之前的实现串起来，利用 innerHTML 将组件渲染到页面上。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rootID <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> mainComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateReactComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> containerContent <span class=\"token operator\">=</span> mainComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span>rootID<span class=\"token punctuation\">)</span>\n\n  container<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> containerContent\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到这里就基本上简单的实现了 React 中将组件渲染到页面上的部分。可以通过一个简单的例子验证一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'./tiny-react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'./tiny-react'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// App.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./tiny-react'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>It is Work<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>页面上将显示 It is Work!</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-label=\"后记 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后记</h2>\n<p>虽然没有涉及到组件更新与组件生命周期，通过阅读 React 的源码基本上也对初始化渲染的过程有了一定的了解，希望对你有所帮助。</p>\n<p>在此感谢 <a href=\"https://github.com/developit/preact\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">preact</a>, <a href=\"https://github.com/Lucifier129/react-lite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-lite</a>, <a href=\"https://github.com/CodeFalling/react-tiny\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-tiny</a> 等项目，它们为本文提供了很大帮助。</p>\n<p>文中的所有代码均于 <a href=\"https://github.com/ahonn/tiny-react/tree/init-render\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tiny-react init-render</a> ，感谢阅读。</p>","timeToRead":9}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5a700a84-51ca-5469-a063-1a3379824d90","redirect":true,"redirectUrl":"/2017/06/08/React初始化渲染/"}}