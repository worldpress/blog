{"data":{"markdownRemark":{"id":"4ce09291-6fb4-5a49-88f7-3d81b84988ef","frontmatter":{"title":"apply, call 与 bind 的区别","date":"2016/03/20","tags":["JavaScript","前端"],"issueId":11},"excerpt":"最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到   部分，看到了几个熟悉的字眼， ，  和  。好像是有些面试题里面有，遂搞清楚了记录下。 apply() 与 call() 每个函数都包含两个非继承的方法：  和  。两个方法的用途都是在特定的作…","html":"<p>最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到 <code class=\"language-text\">Function</code> 部分，看到了几个熟悉的字眼，<code class=\"language-text\">apply()</code>，<code class=\"language-text\">call()</code> 和 <code class=\"language-text\">bind()</code>。好像是有些面试题里面有，遂搞清楚了记录下。</p>\n<h2 id=\"apply-与-call\"><a href=\"#apply-%E4%B8%8E-call\" aria-label=\"apply 与 call permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apply() 与 call()</h2>\n<p>每个函数都包含两个非继承的方法：<code class=\"language-text\">apply()</code> 和 <code class=\"language-text\">call()</code>。两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 <code class=\"language-text\">this</code> 对象的值。这是书中的说法，大概意思就是 <code class=\"language-text\">apply()</code> 和 <code class=\"language-text\">call()</code> 这两个方法是用来改变函数中 <code class=\"language-text\">this</code> 的指向的。而 <code class=\"language-text\">apply()</code> 与 <code class=\"language-text\">call()</code> 的区别就在与接收参数的方式。</p>\n<p><code class=\"language-text\">apply()</code> 方法接收两个参数，一个是在其中运行函数的作用域，函数中的 <code class=\"language-text\">this</code> 的值，另一个是参数数组。\n而 <code class=\"language-text\">call()</code> 方法的第一个参数跟 <code class=\"language-text\">apply()</code> 相同，不同的是除了第一个参数，后面的其他参数将会直接传递给函数。</p>\n<!--more-->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function sum(num1, num2) {\n  return num1 + num2;\n}\n\n// 使用 apply()\nfunction applySum(num1, num2) {\n  return sum.apply(this, arguments);\n}\n\n// 使用 call()\nfunction callSum(num1, num2) {\n  return sum.call(this, num1, num2);\n}\n\nalert(applySum(1, 2)); // 3\nalert(callSum(1, 2)); // 3</code></pre></div>\n<p>这里使用 <code class=\"language-text\">apply()</code> 与 <code class=\"language-text\">call()</code> 的效果都是一样的，不同的只是除了 <code class=\"language-text\">this</code> 的指向之外的参数的传递形式不同。在不给函数传递参数的时候则完全一样，当不知道需要传递的函数参数的个数时，使用 <code class=\"language-text\">apply()</code> 更好。</p>\n<p>实际上 <code class=\"language-text\">apply()</code> 与 <code class=\"language-text\">call()</code> 的用法并不只是这些。他们可以扩充函数赖以运行的作用域，即可以改变函数运行时的上下文。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name = &quot;unknown&quot;;\nvar person = {\n  name = &quot;ahonn&quot;;\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nsayName() // unknown\n// 函数中的 this 为全局环境\nsayName.apply(this); // unknown\n// 函数中的 this 指向了 person\nsayName.apply(person) // ahonn</code></pre></div>\n<p>上面的例子中的 <code class=\"language-text\">apply()</code> 换成 <code class=\"language-text\">call()</code> 的话效果相同，因为我这样只给 <code class=\"language-text\">apply()</code> 传了第一个参数。</p>\n<h2 id=\"bind\"><a href=\"#bind\" aria-label=\"bind permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bind()</h2>\n<p><code class=\"language-text\">bind()</code> 方法与 <code class=\"language-text\">apply()</code> 和 <code class=\"language-text\">call()</code> 相似，同样是可以改变函数内 this 的指向。但与 <code class=\"language-text\">apply()</code>, <code class=\"language-text\">call()</code> 不同的是，<code class=\"language-text\">bind()</code> 方法会创建一个新函数，称为绑定函数，当调用绑定函数时，函数会以创建时的第一个参数 this 作为函数运行的作用域。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name = &quot;unknown&quot;;\nvar person = {\n  name = &quot;ahonn&quot;;\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nvar sayAhonnName = sayName.bind(person);\n\n// 函数中的 this 指向 person\nsayAhonnName() // ahonn</code></pre></div>\n<p>也就是说，<code class=\"language-text\">bind()</code> 方法可以绑定一个上下文到函数中，产生一个新的绑定函数。这样就可以在需要的时候去运行有指定 this 对象的函数。</p>\n<p>使用变量保存 this 的做法：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = {\n  bar: 1,\n  eventBind: function() {\n    var _this = this;\n    $(&#39;.someClass&#39;).on(&#39;click&#39;, function(event) {\n      console.log(_this.bar);\n    });\n  }\n}</code></pre></div>\n<p>因为在 JavaScript 中函数也是对象，使用如果不使用 <code class=\"language-text\">_this</code> 来保存上下文环境的话，在绑定的事件函数中将找不到 <code class=\"language-text\">bar</code> 这个值，因为上下文环境发生了改变。更优雅的做法就是使用 <code class=\"language-text\">bind()</code> 来完成。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = {\n    bar : 1,\n    eventBind: function(){\n        $(&#39;.someClass&#39;).on(&#39;click&#39;,function(event) {\n            console.log(this.bar);\n        }.bind(this));\n    }\n}</code></pre></div>\n<p>这样就把 <code class=\"language-text\">$(&#39;.someClass&#39;).on(&#39;click&#39;,function(event) {}</code> 外的上下文环境给绑定到了函数内了。</p>","timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"4ce09291-6fb4-5a49-88f7-3d81b84988ef"}}