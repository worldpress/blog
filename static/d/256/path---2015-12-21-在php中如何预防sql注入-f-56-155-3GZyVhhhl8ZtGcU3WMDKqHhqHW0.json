{"data":{"markdownRemark":{"id":"0577415c-4629-52bd-85ff-b2f2ada735e9","frontmatter":{"title":"在 PHP 中如何预防 SQL 注入","date":"2015/12/21","tags":["PHP","SQL"],"issueId":6},"excerpt":"翻译自 Stack Overflow:  How can I prevent SQL-injection in PHP?  中的高票答案 Question 如果用户输入的数据没有经过修正，那么应用将会很容易受到 SQL 注入攻击，像下面的这个例子一样： 上面的例子，会因为用户输…","html":"<blockquote>\n<p>翻译自 Stack Overflow: <a href=\"http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How can I prevent SQL-injection in PHP?</a> 中的高票答案</p>\n</blockquote>\n<h2 id=\"Question\"><a href=\"#Question\" aria-label=\"Question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h2>\n<p>如果用户输入的数据没有经过修正，那么应用将会很容易受到 SQL 注入攻击，像下面的这个例子一样：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$unsafe_variable</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user_input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"INSERT INTO `table` (`column`) VALUES ('<span class=\"token interpolation\"><span class=\"token variable\">$unsafe_variable</span></span>')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!--more-->\n<p>上面的例子，会因为用户输入像 <code class=\"language-text\">value&#39;); DROP TABLE table;--</code> 这样的数据，使得 SQL 语句变成：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INSERT INTO `table` (`column`) VALUES(&#39;value&#39;); DROP TABLE table;--&#39;)</code></pre></div>\n<p>应该如何去预防这样的事情发生？</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" aria-label=\"Answer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer</h2>\n<p><strong>使用预处理语句以及参数化查询来预防 SQL 注入</strong></p>\n<p>在发送到数据库前，对每一个参数进行解析。这种处理方式是不可能受到攻击者恶意 SQL 注入的。</p>\n<p>有两种基本操作可以选择，来达到这个目的：</p>\n<ul>\n<li>\n<p>使用 PDO(PHP Data Objects)：支持所有的主流数据库</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$stmt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$pdo</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'SELECT * FROM employees WHERE name = :name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>$stmt->execute(array('name' => $name));</p>\n<p>foreach ($stmt as $row) {\n// do something with $row\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 使用 MySQLi：支持 MySQL 数据库\n``` php\n$stmt = $dbConnection-&gt;prepare(&#39;SELECT * FROM employees WHERE name = ?&#39;);\n$stmt-&gt;bind_param(&#39;s&#39;, $name);\n\n$stmt-&gt;execute();\n\n$result = $stmt-&gt;get_result();\nwhile ($row = $result-&gt;fetch_assoc()) {\n    // do something with $row\n}</code></pre></div>\n<p>如果连接到 MySQL 之外的数据库，有其他的驱动可以选择，例如 <code class=\"language-text\">PostgreSQL</code> 可以使用 <code class=\"language-text\">pg_prepare()</code> 和 <code class=\"language-text\">pg_execute()</code>。PDO 是一个比较普遍的选择，因为它可以兼容更多的数据库。</p>\n<p><strong>正确的建立连接</strong>\n注意，当使用PDO访问MySQL数据库时，默认不使用预处理语句。要解决这个问题，需要禁用预处理语句的模拟 <code class=\"language-text\">ATTR_EMULATE_PREPARES</code> 。</p>\n<blockquote>\n<p><strong>PDO::ATTR<em>EMULATE</em>PREPARES:</strong>\n启用或禁用预处理语句的模拟。 有些驱动不支持或有限度地支持本地预处理。使用此设置强制PDO总是模拟预处理语句（如果为 TRUE ），或试着使用本地预处理语句（如果为 FALSE）。如果驱动不能成功预处理当前查询，它将总是回到模拟预处理语句上。 需要 bool 类型。</p>\n</blockquote>\n<p>一个正确建立 PDO 连接的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$dbConnection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mysql:dbname=dbtest;host=127.0.0.1;charset=utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$dbConnection</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_EMULATE_PREPARES</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbConnection</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在上面的例子中错误模式并不是必要的，但建议添加它。这样脚本就不会因为一个致命错误而报错停止，让开发人员有机会去捕捉抛出的异常并进行处理。</p>\n<p>第一个 <code class=\"language-text\">setAttribute()</code> 是告诉 PDO 禁用预处理语句的模拟，使用真正准备好的预处理语句。这确保语句与值不会在 PHP 解析之前就发送到 MySQL。尽管你可以在选项中设置字符集的构造函数，但是要注意，PHP版本 &#x3C; 5.3.6，默认无视 DSN 的字符参数。</p>\n<p><strong>额外说明</strong>\nSQL 语句会通过预处理解析以及数据库的编译。通过指定参数(例如 ? 或者 :name 之类的参数)，告诉数据库引擎那些是你想要过滤的。当执行语句时，预处理过的语句将会结合参数去执行。</p>\n<p>最重要的是，参数值结合编译的语句之后，它不是一个 SQL 字符串。SQL 注入是通过恶意字符串创建 SQL 发送到数据库的一种攻击。所以分开发送实际的 SQL 参数，可以降低被注入的风险，避免造成一些不希望看到的结果。任何发送的参数，将会在使用预处理之后被当做是字符串。</p>\n<p>在上面的例子中，如果变量 <code class=\"language-text\">$name</code> 的值是 <code class=\"language-text\">&#39;Sarah&#39;; DELETE FROM employees</code>，那么结果将会是查找字符串 <code class=\"language-text\">&quot;&#39;Sarah&#39;; DELETE FROM employees&quot;</code>，而且也将不会得到一个空表。（即是后面的 <code class=\"language-text\">DELETE FROM employees</code> 将被当成字符串，而不是当做 SQL 语句去执行）</p>\n<blockquote>\n<p>使用预处理语句的另一个好处是，如果你在同一个会话中多次执行相同的语句，语句只会被解析和编译一次，在速度上也有一点提升。</p>\n</blockquote>\n<p>下面是一个使用 PDO 来插入数据的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$preparedStatement</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'INSERT INTO table (column) VALUES (:column)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$preparedStatement</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'column'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$unsafeValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>动态查询</strong>\n动态查询依旧可以使用预处理语句去进行，对用某些不能参数化的数据，可以使用白名单来限制可能的值。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Value whitelist</span>\n  <span class=\"token comment\">// $dir can only be 'DESC' or 'ASC'</span>\n<span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$direction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token single-quoted-string string\">'DESC'</span> <span class=\"token punctuation\">:</span> <span class=\"token single-quoted-string string\">'ASC'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>总之，对于用户输入的所有数据都应该在发送到数据库查询之前进行预处理，以此来过滤那些不安全的参数。使得不会因为被 SQL 注入攻击而产生意想不到的结果。</p>","timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0577415c-4629-52bd-85ff-b2f2ada735e9"}}