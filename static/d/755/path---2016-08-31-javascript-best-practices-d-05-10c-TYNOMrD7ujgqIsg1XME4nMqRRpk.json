{"data":{"markdownRemark":{"id":"04aed588-7516-5718-b1dd-d8d54f70248c","frontmatter":{"title":"JavaScript 最佳实践","date":"2016/08/31","tags":["JavaScript","前端"],"issueId":null},"excerpt":"翻译自： JavaScript Best Practices: Tips & Tricks to Level Up Your Code \n没有严格的按照原文翻译，删减修改了部分内容。 在这个教程中，会列出一些重要的 JavaScript 的最佳实践，学习这些并不会很困难。 避免…","html":"<blockquote>\n<p>翻译自：<a href=\"https://www.codementor.io/javascript/tutorial/javascript-best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Best Practices: Tips &#x26; Tricks to Level Up Your Code</a>\n没有严格的按照原文翻译，删减修改了部分内容。</p>\n</blockquote>\n<p>在这个教程中，会列出一些重要的 JavaScript 的最佳实践，学习这些并不会很困难。</p>\n<h2 id=\"避免污染全局作用域\"><a href=\"#%E9%81%BF%E5%85%8D%E6%B1%A1%E6%9F%93%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F\" aria-label=\"避免污染全局作用域 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>避免污染全局作用域</h2>\n<p>声明变量是很有趣的，有时候你会在你不知情的情况下声明了全局变量。在现在的浏览器中，全局变量将会存储在 <code class=\"language-text\">window</code> 变量中。在全局作用域中的变量可能在不经意间被覆盖。</p>\n<!--more-->\n<p>假设你现在有一个 HTML 文件，其中包括一个 <code class=\"language-text\">&lt;script&gt;</code> 标签，包含如下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>显然这会在控制台中输出 42。但是，由于这些代码不是在函数中执行的，而是处于全局作用域中，因此 foo 将会被附加到 <code class=\"language-text\">window</code> 上。也就是说 <code class=\"language-text\">window.foo</code> 的值同样也是 42。</p>\n<p>这样做是危险的，因为这样会覆盖现有的全局变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当执行 <code class=\"language-text\">window.print</code> 或者 <code class=\"language-text\">print</code> 时，因为我们重写了 <code class=\"language-text\">print</code> 函数，所以原来的打印函数不起作用了，也就不会弹出打印框了。</p>\n<p>解决办法很简单：使用立即执行函数（IIFE）。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Declare an anonymous function</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// → undefined</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// → 42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//^ and call it immediately</span></code></pre></div>\n<p>或者，可以将 <code class=\"language-text\">window</code> 等全局变量作为参数传递给函数（这可能提高性能）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">global<span class=\"token punctuation\">,</span> doc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  global<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     doc<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>所以，我们可以使用上述的两种方式，避免不知情的情况下创建全局变量。</p>\n<h2 id=\"使用-use-strict\"><a href=\"#%E4%BD%BF%E7%94%A8-use-strict\" aria-label=\"使用 use strict permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 \"use strict\"</h2>\n<p>严格使用 <code class=\"language-text\">&quot;use strict&quot;</code>，这只不过是在你的代码中添加字符串，但它的作用非常大。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is bad, since you do create a global without having anyone to tell you</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// → 42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 42</span></code></pre></div>\n<p>上述代码，如果使用 <code class=\"language-text\">&quot;use strict&quot;</code>，你将会得到一些错误信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n   a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// Error: Uncaught ReferenceError: a is not defined</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你可能会很奇怪，为什么不把 <code class=\"language-text\">&quot;use strict&quot;</code> 放到函数之外？实际上你可以将它放到函数外，但是这样的话他就在全局环境中应用了。这有可能影响来自其他库的代码。</p>\n<h2 id=\"使用-\"><a href=\"#%E4%BD%BF%E7%94%A8-\" aria-label=\"使用  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 ===</h2>\n<p>如果你比较 a 和 b 时使用 <code class=\"language-text\">==</code>，在 JavaScript 中你会发现这是一种奇怪的方式。如果你有一个字符串和一个数字，像是下面这样。他们将是相等的，即返回 true：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"42\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">42</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>这是一种不严格的比较，在进行数据验证时，最好使用 <code class=\"language-text\">===</code>。这将会严格的比较 a 与 b 是否相等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token number\">42</span>\n<span class=\"token comment\">// → false</span></code></pre></div>\n<h2 id=\"使用神奇的--和-\"><a href=\"#%E4%BD%BF%E7%94%A8%E7%A5%9E%E5%A5%87%E7%9A%84--%E5%92%8C-\" aria-label=\"使用神奇的  和  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用神奇的 &#x26;&#x26; 和 ||</h2>\n<p>根据的你的需要，可以使用逻辑运算符使得代码更加简短。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"foo\"</span>\n<span class=\"token comment\">// → \"foo\"</span>\n\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token number\">42</span>\n<span class=\"token comment\">// → 42</span>\n\n<span class=\"token comment\">// Note that if you want to handle 0 there, you need</span>\n<span class=\"token comment\">// to check if a number was provided:</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">||</span> <span class=\"token number\">42</span>\n<span class=\"token comment\">// → 42</span>\n\n<span class=\"token comment\">// This is a ternary operator—works like an inline if-else statement</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">?</span> a <span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 0</span></code></pre></div>\n<p>可以这样简单的实现 if 的检查：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">expr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Instead of:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你需要返回结果，你还可以这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> expr <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> expr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → { foo: \"bar\" }</span></code></pre></div>\n<p>这里你可以不同意我的观点，但这是比较理想的情况。如果你不想要这样丑化你的代码，使得代码隐晦。这是那些 JavaScript 压缩工具会做的事情，你可以使用它们。</p>\n<p>虽然代码比较短，但是这依然是具有可读性的。</p>\n<h2 id=\"转换类型\"><a href=\"#%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B\" aria-label=\"转换类型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>转换类型</h2>\n<p>有很多种方式去进行类型转换，要怎么转换取决于你。这里有一些常用的方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// From anything to a number</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myNumber <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// shortcut for Number(foo)</span>\n<span class=\"token comment\">// → 42</span>\n\n<span class=\"token comment\">// Tip: you can convert it directly into a negative number</span>\n<span class=\"token keyword\">var</span> negativeFoo <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// or -Number(foo)</span>\n<span class=\"token comment\">// → -42</span>\n\n<span class=\"token comment\">// From object to array</span>\n<span class=\"token comment\">// Tip: `arguments` is an object and in general you want to use it as array</span>\n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// → [ 'foo', 'bar' ]</span>\n\n<span class=\"token comment\">// Anything to boolean</span>\n<span class=\"token comment\">/// Non non p is a boolean p</span>\n<span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>t\n<span class=\"token comment\">// → true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>f\n<span class=\"token comment\">// → false</span>\n\n<span class=\"token comment\">/// And non-p is a boolean non-p</span>\n<span class=\"token operator\">!</span>t\n<span class=\"token comment\">// → false</span>\n<span class=\"token operator\">!</span>f\n<span class=\"token comment\">// → true</span>\n\n<span class=\"token comment\">// Anything to string</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> foo <span class=\"token comment\">// shortcut for String(foo)</span>\n<span class=\"token comment\">// → \"42\"</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hello<span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → '{ \"hello\":\"world\" }'</span>\n\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// beautify the things</span>\n<span class=\"token comment\">// →</span>\n<span class=\"token comment\">// '{</span>\n<span class=\"token comment\">//    \"hello\": \"world\"</span>\n<span class=\"token comment\">// }'</span>\n\n<span class=\"token comment\">// Note you cannot JSON.stringify circular structures</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⚠ TypeError: JSON.stringify cannot serialize cyclic structures.</span></code></pre></div>\n<h2 id=\"代码风格\"><a href=\"#%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC\" aria-label=\"代码风格 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码风格</h2>\n<p>对新项目，保持项目中的所有代码的风格相同。对于现有项目，使用现有项目的代码风格，除非你真的想去改变它。</p>\n<p><strong>制定你的代码风格，并始终遵循它</strong></p>\n<p>这里还有一些推荐的现有代码风格：</p>\n<ul>\n<li><a href=\"https://google.github.io/styleguide/javascriptguide.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google JavaScript Style Guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">airbnb/javascript</a></li>\n</ul>","timeToRead":3}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"04aed588-7516-5718-b1dd-d8d54f70248c","redirect":true,"redirectUrl":"/2016/08/31/JavaScript最佳实践/"}}