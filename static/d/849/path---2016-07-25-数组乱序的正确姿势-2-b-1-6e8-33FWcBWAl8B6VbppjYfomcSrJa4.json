{"data":{"markdownRemark":{"id":"a7386d49-d9ab-5164-acbe-9570234e84af","frontmatter":{"title":"数组乱序的正确姿势","date":"2016/07/25","tags":["JavaScript","前端","Underscore"],"commentId":null},"excerpt":"在   中有一个函数，其作用是将数组乱序排序，实现如下： 其中使用的数组乱序的算法是  Fisher–Yates shuffle 。这是一个 O(n) 复杂度的随机排列数组元素的经典算法。 每次循环从前面的   个元素中随机选择一个元素  。将这个元素与第   个元素进行交换，…","html":"<p>在 <code class=\"language-text\">underscore</code> 中有一个函数，其作用是将数组乱序排序，实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Shuffle a collection, using the modern version of the</span>\n<span class=\"token comment\">// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).</span>\n<span class=\"token comment\">// `shuffle` 函数。</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">shuffle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token function\">isArrayLike</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj <span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> shuffled <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rand <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rand <span class=\"token operator\">!==</span> index<span class=\"token punctuation\">)</span> shuffled<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> shuffled<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    shuffled<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> shuffled<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!--more-->\n<p>其中使用的数组乱序的算法是 <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fisher–Yates shuffle</a>。这是一个 O(n) 复杂度的随机排列数组元素的经典算法。</p>\n<p>每次循环从前面的 <code class=\"language-text\">index</code> 个元素中随机选择一个元素 <code class=\"language-text\">shuffle[rand]</code>。将这个元素与第 <code class=\"language-text\">index</code> 个元素进行交换，直到 <code class=\"language-text\">index == length</code> 为止。这样对元素进行随机交换，对于每个结果所获得概率是均匀的。<code class=\"language-text\">_.shuffle</code> 方法是返回一个新的乱序数组，所以需要一个新的数组来存储。</p>\n<p>对原有数组进行乱序：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> index <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rand <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>More</strong></p>\n<ul>\n<li><a href=\"https://github.com/hanzichi/underscore-analysis/issues/15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript 数组乱序</a></li>\n<li><a href=\"https://www.h5jun.com/post/array-shuffle.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">数组的完全随机排列</a></li>\n</ul>","timeToRead":1}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a7386d49-d9ab-5164-acbe-9570234e84af"}}