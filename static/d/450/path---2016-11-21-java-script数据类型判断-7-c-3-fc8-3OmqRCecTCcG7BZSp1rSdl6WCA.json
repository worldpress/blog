{"data":{"markdownRemark":{"id":"1bc794fe-5970-5992-af6b-8827594a9e41","frontmatter":{"title":"JavaScript 数据类型判断","date":"2016/11/21","tags":["JavaScript","前端"],"issueId":30},"excerpt":"最近开始读之前没有读完的 underscore 的源码，刚把 Object 部分读完。对 JavaScript 中类型判断部分的总结。 Object.prototype.toString() 在进行类型判断时，使用到最多的当属  。  方法返回一个代表该对象的字符串。每个对象都…","html":"<p>最近开始读之前没有读完的 underscore 的源码，刚把 Object 部分读完。对 JavaScript 中类型判断部分的总结。</p>\n<h2 id=\"ObjectprototypetoString\"><a href=\"#ObjectprototypetoString\" aria-label=\"ObjectprototypetoString permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.prototype.toString()</h2>\n<p>在进行类型判断时，使用到最多的当属 <code class=\"language-text\">Object.prototype.toString()</code>。</p>\n<p><code class=\"language-text\">toString()</code> 方法返回一个代表该对象的字符串。每个对象都会继承 Object 上的 <code class=\"language-text\">toString</code> 方法，如果该方法没有被同名方法覆盖的话。使用 <code class=\"language-text\">toString()</code> 方法将会返回字符串 <code class=\"language-text\">&quot;[object type]&quot;</code>。其中 type 根据对象的类型的不同而不同。</p>\n<p>关于 <code class=\"language-text\">Object.prototype.toString()</code> 的详细描述可以查看：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object.prototype.toString() - JavaScript | MDN</a></p>\n<!--more-->\n<h2 id=\"使用-toString-判断类型\"><a href=\"#%E4%BD%BF%E7%94%A8-toString-%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B\" aria-label=\"使用 toString 判断类型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 toString() 判断类型</h2>\n<p>由于 <code class=\"language-text\">toString()</code> 会返回带有类型信息的字符串，所以通常可以使用它来进行数据类型的判断。</p>\n<p>underscore 中对一些数据类型的判断实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Arguments'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Function'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'String'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Date'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'RegExp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Symbol'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Map'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WeakMap'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WeakSet'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  _<span class=\"token punctuation\">[</span><span class=\"token string\">'is'</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>通过 <code class=\"language-text\">toString()</code> 函数的返回值判断类型，这里不使用 <code class=\"language-text\">typeof</code> 判断的原因是字面量与对象的返回值不同。</p>\n<p>例如字符串字面量 <code class=\"language-text\">&quot;1&quot;</code> 通过 <code class=\"language-text\">typeof</code> 操作符返回的是 <code class=\"language-text\">&quot;string&quot;</code>，而字符串对象 <code class=\"language-text\">new String(&#39;1&#39;)</code> 通过 <code class=\"language-text\">typeof</code> 操作符返回的却是 <code class=\"language-text\">&quot;object&quot;</code>。所以通过 <code class=\"language-text\">Object.prototype.toString()</code> 来进行判断最为妥当。</p>\n<h2 id=\"判断-NaN，null，undefined\"><a href=\"#%E5%88%A4%E6%96%AD-NaN%EF%BC%8Cnull%EF%BC%8Cundefined\" aria-label=\"判断 NaN，null，undefined permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>判断 NaN，null，undefined</h2>\n<h3 id=\"NaN\"><a href=\"#NaN\" aria-label=\"NaN permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaN</h3>\n<p>在 JavaScript 的 Number 类型中有这样一个特殊的存在，那就是 <code class=\"language-text\">NaN</code>。<code class=\"language-text\">NaN</code> 的意思是 Not-A-Number，即不是一个数字。当对无法转换为数字的变量进行数字转换时就会得到 <code class=\"language-text\">NaN</code>。<code class=\"language-text\">Nan</code> 还有一个特殊的性质，就是 <code class=\"language-text\">NaN === NaN</code> 返回的是 false。</p>\n<p>所以对 NaN 的判断的实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>先判断是否为 Number 类型，排除隐式类型转换造成的误判。再使用 isNaN 函数判断是否为 NaN。</p>\n<h3 id=\"null\"><a href=\"#null\" aria-label=\"null permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null</h3>\n<p>在 JavaScript 中有 <code class=\"language-text\">==</code> 与 <code class=\"language-text\">===</code> 两个相等操作符，后者为严格比较。<code class=\"language-text\">null == undefined</code> 的返回值是 true，所以不能使用这个来判断是否为 null。而 <code class=\"language-text\">null === undefined</code> 返回的是 false，因此使用严格相等哎判断是否为 null。而</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNull</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"undefined\"><a href=\"#undefined\" aria-label=\"undefined permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>undefined</h3>\n<p>判断变量是否为 <code class=\"language-text\">undefined</code>，很自然会想到使用 <code class=\"language-text\">foo === undefined</code> 的方式来判断。但是这样做是不安全的，在旧的浏览器版本上 <code class=\"language-text\">undefined</code> 是可以被重写的。这时使用上面那样判断会出现这种状况：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>所以这种判断方式不被推荐，即使新版本的浏览器上无法重写 undefined。更推荐的方式是使用 <code class=\"language-text\">void 0</code> 来判断。\n关于 <code class=\"language-text\">void 0</code> 与 <code class=\"language-text\">undefined</code> 可以参考我在知乎上的回答：<a href=\"https://www.zhihu.com/question/52645620/answer/131470539\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">（void 0）在javascript中表示什么，和undefined有什么区别？</a></p>\n<p>推荐的 undefined 判断实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isUndefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"判断-Object\"><a href=\"#%E5%88%A4%E6%96%AD-Object\" aria-label=\"判断 Object permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>判断 Object</h2>\n<p>在 underscore 中对对象类型的判断是通过 <code class=\"language-text\">typeof</code> 来实现的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">||</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">typeof</code> 操作符在变量为 <code class=\"language-text\">null</code> 或者是对象时返回 <code class=\"language-text\">&quot;object&quot;</code>，在变量为函数对象时返回 <code class=\"language-text\">function</code>。</p>\n<p>我们需要的是判断变量是否为对象，那么就需要排除 <code class=\"language-text\">null</code> 的情况，即将变量进行两次取反操作，将变量转换为 <code class=\"language-text\">Boolean</code> 类型。由于 <code class=\"language-text\">null</code> 会转换为 <code class=\"language-text\">false</code>，那么这样就可以排除 <code class=\"language-text\">null</code> 的干扰。</p>","timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1bc794fe-5970-5992-af6b-8827594a9e41"}}