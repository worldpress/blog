{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"17e572ec-f9a9-5398-a2b9-ba212642d999","frontmatter":{"title":"Sass 初探","date":"2016/06/07","tags":["CSS","Sass"]},"excerpt":"为什么学 Sass 说起来其实很早就知道   这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用   还是 ，最后用了变量名用   开头的 Less（可能是 PHP 的原因，对   开头的变量名没什么好感）。 最近正在看  ，源码是用 Sass 写的。  之前也是用…","timeToRead":3}},{"node":{"id":"9aca6b35-bba7-5446-8380-9560231e02d3","frontmatter":{"title":"使用 Nokogiri 解析 HTML","date":"2016/05/28","tags":["Ruby"]},"excerpt":"Nokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。 解析 HTML 文档 使用   解析 HTML 将会生成  。\n生成该对象的方式有三种，分别是通过字符串解析，通过文件解析，通过网络解析。…","timeToRead":2}},{"node":{"id":"447f4819-27fa-528e-84cf-337edc7e6e94","frontmatter":{"title":"使用 JavaScript 实现简单的拖拽","date":"2016/05/14","tags":["JavaScript","前端"]},"excerpt":"步骤 使用 JavaScript 实现拖拽的步骤： 让元素捕获事件（mousedown, mousemove & mouseup） 单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置 拖动鼠标，触发 mousemove，不断的获取鼠标的位置，并通过计算…","timeToRead":2}},{"node":{"id":"e89c10ab-b2c6-50b2-a8b1-0844fcea5bcb","frontmatter":{"title":"记第一次面试","date":"2016/05/14","tags":["面试"]},"excerpt":"记录第一次面试 流水账 想到什么写什么 第一次正正经经的去面试，虽然只是个软件开发暑期实习生。 刚开始是在网上无聊的逛 V2EX 什么的，然后看了看 conde 社区。后来神不知鬼不觉的不知道为什么就跑到了 Ruby China 去了，又神不知鬼不觉的跑去看了招聘的版块。 其实…","timeToRead":1}},{"node":{"id":"507a552b-275b-5ee2-a54d-a700c02eb28c","frontmatter":{"title":"从 optimizeCb 说起","date":"2016/05/03","tags":["JavaScript","前端","Underscore"]},"excerpt":"optimizeCb 在   中的内部函数  ，顾名思义就是 optimize callback，即优化回调函数。 optimizeCb: 它是这样处理回调的，当回调函数指定上下文环境时，根据   来分情况使用  ，不同情况的\n区别只是   除了上下文环境之外的函数参数的个数不…","timeToRead":2}},{"node":{"id":"77632772-a795-52ae-8b51-575d3bfaa68f","frontmatter":{"title":"不合常理的变量提升","date":"2016/04/28","tags":["JavaScript","前端"]},"excerpt":"变量提升 合乎常理的预期 按照合乎常理的预期，程序应该是由上至下一行一行执行的，如果使用了之前没有定义的变量的话，正确的反应应该是会报错，就象下面这段 C++ 代码： 并不完全正确 实际上合乎常理的预期并不是“完全正确”的，在 JavaScript 中并不符合直觉。 例如这段 …","timeToRead":2}},{"node":{"id":"d19b2d14-b7db-5768-bc90-ba941add9062","frontmatter":{"title":"事件流：冒泡与捕获","date":"2016/04/16","tags":["JavaScript","前端"]},"excerpt":"事件流 事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。 事件冒泡 事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document 对象…","timeToRead":3}},{"node":{"id":"d0856c61-dd90-50a4-ae89-22a87f66b33f","frontmatter":{"title":"JavaScript 作用域与闭包","date":"2016/04/04","tags":["JavaScript","前端"]},"excerpt":"作用域 在 JavaScript 中变量的作用域与其他语言不同，JavaScript 的作用域不是由   来界定，而是函数。所以循环实际上是在全局作用域中。 全局变量 & 局部变量 JavaScript 变量的作用域分为两种，全局和局部。 在 JavaScript 中声明全局变…","timeToRead":1}},{"node":{"id":"bca1824b-30fe-54c8-a026-5655a38b4fa7","frontmatter":{"title":"奇怪的 JavaScript 原型链","date":"2016/03/29","tags":["JavaScript","前端"]},"excerpt":"在 JavaScript 中一切皆为对象（Object），但是却与 Java，C++ 等语言不同，没有“类”的概念，也没有所谓的“子类”和“父类”。JavaScript 中的对象是基于原型（prototype）来实现面向对象的，靠奇怪的原型链（prototype chain）来…","timeToRead":1}},{"node":{"id":"8e548b66-0df8-5379-8469-833c487b0466","frontmatter":{"title":"apply, call 与 bind 的区别","date":"2016/03/20","tags":["JavaScript","前端"]},"excerpt":"最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到   部分，看到了几个熟悉的字眼， ，  和  。好像是有些面试题里面有，遂搞清楚了记录下。 apply() 与 call() 每个函数都包含两个非继承的方法：  和  。两个方法的用途都是在特定的作…","timeToRead":2}},{"node":{"id":"5de8096e-3f4b-56ef-a34e-a5027ed96409","frontmatter":{"title":"Jade 模板引擎","date":"2016/02/29","tags":["Jade","前端"]},"excerpt":"最近在改一个 Hexo 的主题  apollo 。然后看到这个主题用的是叫做 Jade 的模版引擎写的。之前了解过几个模版引擎 ejs，swig 什么的，但是这些都是在原有的 HTML 中插标签，看起来有点乱。看到 Jade 后就深深的被它那如同 Python 的缩进语法深深吸…","timeToRead":4}},{"node":{"id":"9bdad80b-cdb5-5dd6-abc3-c8eb9ca19afd","frontmatter":{"title":"Python 多线程初步了解","date":"2016/02/20","tags":["Python"]},"excerpt":"这两天在写  Nada  的下载功能，遇到一个问题，在下载歌曲的时候整个界面都会卡住，必须等待下载完成才能够恢复，因为写的时候是直接顺序执行的，没有多线程。之前在写播放功能的时候是参考了别人的代码，自己其实对多线程部分不是很了解。然后趁着晚上了解一下 Python 的 thre…","timeToRead":2}},{"node":{"id":"6ca96dc6-67e3-5199-9353-053ca6756e68","frontmatter":{"title":"Python curses 模块","date":"2016/01/23","tags":["Python"]},"excerpt":"Python 中的 curses 模块封装了 C 语言的 curses。curses 是一个能够提供基于文本终端窗口功能的动态库。它可以创建和管理一个窗口，使用8中不同的颜色，提供鼠标以及键盘支持。与 Tkinter 不同的是 curses 是基于终端的。 curses 支持 …","timeToRead":1}},{"node":{"id":"3fb78216-444f-5aa7-9df9-2846f639a039","frontmatter":{"title":"2015 总结","date":"2015/12/31","tags":["年终总结"]},"excerpt":"记录 2015，计划 2016 关于生活 对2015 年的春节并没什么印象，现在也想不起来那时候在做什么了。大概是在游戏中度日吧，回想那段日子，现在还真是觉得那时候在浪费时间呢。 接着呢就是大一的第二个学期的到来。数据结构，对这门课还挺感兴趣呢，学起来也觉得还 ok。大概在 3…","timeToRead":1}},{"node":{"id":"956c05d3-1233-5fb7-8a1d-595864c737ba","frontmatter":{"title":"在 PHP 中如何预防 SQL 注入","date":"2015/12/21","tags":["PHP","SQL"]},"excerpt":"翻译自 Stack Overflow:  How can I prevent SQL-injection in PHP?  中的高票答案 Question 如果用户输入的数据没有经过修正，那么应用将会很容易受到 SQL 注入攻击，像下面的这个例子一样： 上面的例子，会因为用户输…","timeToRead":2}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"page":3,"skip":30,"limit":15,"total":50}}